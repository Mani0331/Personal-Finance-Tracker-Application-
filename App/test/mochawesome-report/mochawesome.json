{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-06T15:54:46.451Z",
    "end": "2025-03-06T15:55:12.682Z",
    "duration": 26231,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5252dddf-f186-4299-b768-7cca377f2a5c",
      "title": "",
      "fullFile": "C:\\Users\\Taimoor\\Desktop\\current\\Team 1\\dev\\Personal-Finance-Tracker-Application-\\App\\test\\financeapptest.spec.js",
      "file": "\\financeapptest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "564ebcb7-a1e9-41d0-b11a-0c1d28136877",
          "title": "finance app test",
          "fullFile": "C:\\Users\\Taimoor\\Desktop\\current\\Team 1\\dev\\Personal-Finance-Tracker-Application-\\App\\test\\financeapptest.spec.js",
          "file": "\\financeapptest.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"finance app test\"",
              "fullTitle": "finance app test \"before each\" hook in \"finance app test\"",
              "timedOut": false,
              "duration": 1772,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  driver = await new Builder()\n    .forBrowser('chrome')\n    .build();\n  await driver.manage().setTimeouts({ implicit: 10000 }); // Set implicit wait\n} catch (error) {\n  console.error('Error setting up WebDriver:', error);\n  throw error;\n}",
              "err": {},
              "uuid": "988c4340-a7bf-4358-b728-c2e0a07b805d",
              "parentUUID": "564ebcb7-a1e9-41d0-b11a-0c1d28136877",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"finance app test\"",
              "fullTitle": "finance app test \"after each\" hook in \"finance app test\"",
              "timedOut": false,
              "duration": 171,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  try {\n    await driver.quit();\n  } catch (error) {\n    console.error('Error closing browser:', error);\n  }\n}",
              "err": {},
              "uuid": "79c150ee-352c-4582-8b40-a7e13a339268",
              "parentUUID": "564ebcb7-a1e9-41d0-b11a-0c1d28136877",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should test basic finance app functionality",
              "fullTitle": "finance app test should test basic finance app functionality",
              "timedOut": false,
              "duration": 24275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  console.log('Starting test...');\n  \n  // Navigate to the application\n  await driver.get(\"https://mani0331.github.io/Personal-Finance-Tracker-Application-/index.html\");\n  await driver.manage().window().setRect({ width: 1382, height: 744 });\n  console.log('Navigated to application');\n  // Add Transaction\n  console.log('Adding transaction...');\n  await waitAndClick(By.linkText(\"Add Transaction\"));\n  await waitAndType(By.id(\"description\"), \"Test Transaction\");\n  await waitAndType(By.id(\"amount\"), \"1000\");\n  await waitAndClick(By.css(\".btn-primary\"));\n  console.log('Transaction added');\n  \n  // Go back\n  await waitAndClick(By.css(\".btn-secondary\"));\n  console.log('Returned to main page');\n  // Check Transaction History\n  console.log('Checking transaction history...');\n  await waitAndClick(By.linkText(\"Transaction History\"));\n  \n  // Wait for transaction table and rows\n  await waitForElements(By.css(\"tr\"), 2); // Wait for header row + at least one transaction\n  console.log('Transaction found in history');\n  // Edit Transaction\n  console.log('Editing transaction...');\n  await waitAndType(By.css(\"tr:nth-child(1) > td:nth-child(2) > .form-control\"), \"Updated Transaction\");\n  await handleModal(By.css(\"tr:nth-child(1) .btn-warning\"), \"updateConfirmationModal\");\n  console.log('Transaction updated');\n  // Delete Transaction\n  console.log('Deleting transaction...');\n  await handleModal(By.css(\"tr:nth-child(1) .btn-danger\"), \"deleteConfirmationModal\");\n  console.log('Transaction deleted');\n  // Check Daily Transaction History\n  console.log('Checking daily transaction history...');\n  await waitAndClick(By.css(\".btn-success\"));\n  await waitAndClick(By.linkText(\"Daily Transaction History\"));\n  await waitAndClick(By.css(\".btn\"));\n  console.log('Daily transaction history checked');\n  console.log('Test completed successfully!');\n} catch (error) {\n  console.error('Test error:', error);\n  // Take screenshot on failure\n  try {\n    const screenshot = await driver.takeScreenshot();\n    const fs = await import('fs');\n    await fs.promises.writeFile('test-failure-screenshot.png', screenshot, 'base64');\n    console.log('Screenshot saved as test-failure-screenshot.png');\n  } catch (screenshotError) {\n    console.error('Failed to take screenshot:', screenshotError);\n  }\n  throw error;\n}",
              "err": {},
              "uuid": "63f0b217-37db-44b0-80e1-364c9dafb84a",
              "parentUUID": "564ebcb7-a1e9-41d0-b11a-0c1d28136877",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "63f0b217-37db-44b0-80e1-364c9dafb84a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24275,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}