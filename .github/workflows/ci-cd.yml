name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'App/**'
      - '.github/workflows/**'
      - 'docker/**'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  DOCKER_IMAGE: haseeb810/finance-tracker
  NODE_VERSION: '18'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'App/package-lock.json'

      - name: Install Dependencies
        run: |
          cd App
          npm install
          npm install eslint @eslint/js globals --save-dev

      - name: Run ESLint
        run: |
          cd App
          if [ ! -f "eslint.config.js" ]; then
            echo "Creating ESLint config..."
            echo 'import js from "@eslint/js";
            import globals from "globals";

            export default [
              {
                ignores: ["**/mochawesome-report/**"],
                languageOptions: {
                  ecmaVersion: "latest",
                  sourceType: "module",
                  globals: {
                    ...globals.browser,
                    ...globals.node,
                    ...globals.mocha
                  }
                },
                rules: {
                  ...js.configs.recommended.rules,
                  "no-unused-vars": "warn",
                  "no-console": "off"
                }
              }
            ];' > eslint.config.js
          fi
          npx eslint . --ext .js || true

      - name: Check for vulnerabilities
        run: |
          cd App
          npm audit
          npm outdated || true
        continue-on-error: true

  test:
    needs: code-quality
    runs-on: windows-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [16.x, 18.x]
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'App/package-lock.json'

      - name: Install Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            App/node_modules
            ~/.cache/selenium
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install Dependencies
        run: |
          cd App
          npm ci
          npm install selenium-webdriver chromedriver mocha @types/selenium-webdriver mochawesome mochawesome-merge mochawesome-report-generator --save-dev

      - name: Run Unit Tests
        id: unit_tests
        run: npx mocha test/server.test.js --exit
        working-directory: App

      - name: Run Selenium Tests
        id: selenium_tests
        run: |
          cd App/test
          npx mocha financeapptest.spec.js --timeout 30000 --reporter mochawesome
        env:
          CI: true
          NODE_ENV: test
          SELENIUM_BROWSER: chrome
          SELENIUM_HEADLESS: true

      - name: Generate Combined Test Report
        if: always()
        run: |
          cd App/test
          npx mochawesome-merge mochawesome-report/*.json > testReport.json
          npx mochawesome-report-generator testReport.json --cdn true --reportTitle "Finance App Test Report"

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports-node-${{ matrix.node-version }}
          path: |
            App/test/mochawesome-report
            App/test/test-failure-screenshot.png
          if-no-files-found: warn

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Deploy Application
        run: |
          echo "Deploying to ${{ github.event.inputs.environment || 'staging' }}"
          echo "Deployment for Windows"

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Deployment to ${{ github.event.inputs.environment || 'staging' }} successful!"
          else
            echo "‚ùå Deployment to ${{ github.event.inputs.environment || 'staging' }} failed!"
            exit 1
          fi

  notify:
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check Pipeline Status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "üéâ Pipeline completed successfully!"
          else
            echo "‚ùå Pipeline failed! Check the logs for details."
            exit 1
          fi
